// ## üîÅ **Challenge 3 ‚Äì Callback Hell (real async chain)**

// ### üß© Scenario:

// You have 3 async steps:
// 1Ô∏è‚É£ Login user
// 2Ô∏è‚É£ Fetch their profile
// 3Ô∏è‚É£ Fetch their notifications

function loginUser(callback) {
  setTimeout(() => {
    console.log("‚úÖ User logged in");
    callback({ id: 1, username: "Zeha" });
  }, 1000);
}

function getProfile(user, callback) {
  setTimeout(() => {
    console.log(`üìÑ Fetched profile for ${user.username}`);
    callback({ ...user, bio: "Building SaaS üöÄ" });
  }, 1000);
}

function getNotifications(profile, callback) {
  setTimeout(() => {
    console.log(`üîî Notifications for ${profile.username}`);
    callback(["New message", "System update"]);
  }, 1000);
}

// now chain them
loginUser((user) => {
  getProfile(user, (profile) => {
    getNotifications(profile, (message) => console.log(message));
  });
});
// ```

// user => {}

// ### üß† Your task:

// 1Ô∏è‚É£ Chain all 3 functions using callbacks.
// 2Ô∏è‚É£ Print final notifications.
// 3Ô∏è‚É£ Notice how it gets deeply nested (that‚Äôs callback hell).
